#!/usr/bin/env python3

from __future__ import with_statement

import sys
import os
import json
import codecs
from subprocess import Popen, PIPE
from urllib.parse import quote
from tempfile import NamedTemporaryFile

def main():
    if len(sys.argv) != 3:
        print("Usage: bookmarkdown.py <input-directory> <book-title>")
        sys.exit(1)

    dirname = sys.argv[1]
    title = sys.argv[2]

    if not os.path.isdir(dirname):
        print("Not a directory: %s" % dirname)
        sys.exit(1)

    meta = {
        'title': title,
        'chapters': []
    }

    filenames = [f for f in os.listdir(dirname) if f.endswith('.md')]
    filenames.sort()

    for filename in filenames:
        path = os.path.join(dirname, filename)
        with codecs.open(path, 'r', 'utf-8') as f:
            content = f.read()

        # Use pandoc to convert the markdown to HTML.
        p = Popen(['pandoc', '-f', 'markdown', '-t', 'html'], stdin=PIPE, stdout=PIPE)
        output = p.communicate(input=content.encode('utf-8'))[0]
        html = output.decode('utf-8')

        # Use pandoc to get the title of the chapter.
        p = Popen(['pandoc', '-f', 'markdown', '-t', 'json'], stdin=PIPE, stdout=PIPE)
        output = p.communicate(input=content.encode('utf-8'))[0]
        doc = json.loads(output.decode('utf-8'))
        try:
            # The document is a list of blocks.  Find the first one that's a
            # Header and pull out the text from it.
            chapter_title = 'UNKNOWN'
            for block in doc['blocks']:
                if block['t'] == 'Header':
                    # The third element of a Header block is a list of Inline
                    # objects.  We look for ones that are Str and join them.
                    strings = []
                    for item in block['c'][2]:
                        if item['t'] == 'Str':
                            strings.append(item['c'])
                        elif item['t'] == 'Space':
                            strings.append(' ')
                    chapter_title = ''.join(strings)
                    break
        except (KeyError, ValueError):
            chapter_title = os.path.splitext(filename)[0].replace('_', ' ')

        meta['chapters'].append({
            'filename': quote(filename.replace('.md', '.html')),
            'title': chapter_title,
            'html': html
        })

    # Generate the HTML pages.
    for chapter in meta['chapters']:
        path = os.path.join(dirname, chapter['filename'])
        with codecs.open(path, 'w', 'utf-8') as f:
            # Previous chapter link.
            if chapter != meta['chapters'][0]:
                previous = meta['chapters'][meta['chapters'].index(chapter) - 1]
                prev_link = '<a href="%s" class="previous">&laquo; %s</a>' % (
                    previous['filename'], previous['title'])
            else:
                prev_link = ''

            # Next chapter link.
            if chapter != meta['chapters'][-1]:
                next = meta['chapters'][meta['chapters'].index(chapter) + 1]
                next_link = '<a href="%s" class="next">%s &raquo;</a>' % (
                    next['filename'], next['title'])
            else:
                next_link = ''

            # Write the page.
            f.write('''<!DOCTYPE html>
<html>
<head>
    <title>%(title)s: %(chapter_title)s</title>
    <style>
        body { font-family: serif; line-height: 1.4em; margin: 4em; }
        .nav { margin: 2em 0; }
        .previous { float: left; }
        .next { float: right; }
    </style>
</head>
<body>
    <h1>%(chapter_title)s</h1>
    <div class="content">
        %(html)s
    </div>
    <div class="nav">
        %(prev_link)s
        %(next_link)s
    </div>
</body>
</html>''' % {
                'title': meta['title'],
                'chapter_title': chapter['title'],
                'html': chapter['html'],
                'prev_link': prev_link,
                'next_link': next_link
            })

    # Generate the PDF via LaTeX.
    # First build up a giant markdown document with all the chapters.
    all_markdown = []
    for chapter in meta['chapters']:
        all_markdown.append('# %s\n\n' % chapter['title'])
        path = os.path.join(dirname, chapter['filename'].replace('.html', '.md'))
        with codecs.open(path, 'r', 'utf-8') as f:
            all_markdown.append(f.read())
        all_markdown.append('\n\n\\newpage\n\n')

    # Stuff it all into pandoc to generate a PDF.
    all_markdown = ''.join(all_markdown)
    with NamedTemporaryFile(delete=False, suffix='.pdf') as f:
        pdf_path = os.path.join(dirname, '%s.pdf' % title)
        p = Popen([
            'pandoc', '-f', 'markdown', '-t', 'latex',
            '-o', pdf_path,
            '--variable', 'papersize:letter',
            '--variable', 'documentclass:report',
            '--template', 'default',
        ], stdin=PIPE)
        p.communicate(input=all_markdown.encode('utf-8'))

    print("Done!")
    print("HTML files written to %s" % dirname)
    print("PDF written to %s" % pdf_path)

if __name__ == '__main__':
    main()
